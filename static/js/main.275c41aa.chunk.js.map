{"version":3,"sources":["requests/getImages.js","components/Search.js","components/SearchResults.js","components/App.js","serviceWorker.js","index.js"],"names":["getImages","query","axios","get","params","q","then","response","data","collection","items","filter","img","media_type","map","links","href","catch","error","console","log","Promise","resolve","Search","setSearchResultList","useState","searchText","setSearchText","isLoading","setIsLoading","isError","setIsError","handleSubmit","event","a","preventDefault","className","onSubmit","type","placeholder","onChange","e","target","value","name","SearchResults","results","length","image","key","src","alt","App","searchResult","setSearchResult","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yVA6BeA,EA3BG,SAACC,GACf,OAAIA,EAIIC,IAAMC,IAAI,qCAAsC,CAC5CC,OAAQ,CACNC,EAAGJ,KAGRK,MAAK,SAAAC,GAQN,OAPgBA,EAASC,KAAKC,WAAWC,MACZC,QAAO,SAAAC,GACjC,MAAkC,UAA3BA,EAAIJ,KAAK,GAAGK,cAEMC,KAAI,SAAAF,GAC5B,OAAOA,EAAIG,MAAM,GAAGC,WAIvBC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAnBbG,QAAQC,QAAQ,KCmDhBC,EAlDA,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,oBAAyB,EACFC,mBAAS,IADP,mBAC/BC,EAD+B,KACnBC,EADmB,OAEJF,oBAAS,GAFL,mBAE/BG,EAF+B,KAEpBC,EAFoB,OAGRJ,oBAAS,GAHD,mBAG/BK,EAH+B,KAGtBC,EAHsB,KAKhCC,EAAY,uCAAG,WAAOC,GAAP,SAAAC,EAAA,6DACjBL,GAAa,GACbI,EAAME,iBAFW,cAIbX,EAJa,SAIaxB,EAAU0B,GAJvB,oFAMbK,GAAW,GANE,QAQjBF,GAAa,GARI,0DAAH,sDAWlB,OAAIC,EACO,sFAIP,oCACI,0BACIM,UAAU,cACVC,SAAUL,GAEV,2BACII,UAAU,eACVE,KAAK,OACLC,YAAY,sBACZC,SAAU,SAACC,GAAD,OAAOd,EAAcc,EAAEC,OAAOC,UAG5C,4BACIP,UAAU,gBACVE,KAAK,SACLM,KAAK,MAHT,QAQHhB,GAAa,yBAAKQ,UAAU,aClB1BS,G,MAxBO,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACpB,OAAIA,EAAQC,OAIR,yBAAKX,UAAU,mBACX,oCACKU,EAAQhC,KAAI,SAAAkC,GAAK,OACd,yBACAC,IAAKD,EACLE,IAAKF,EACLG,IAAI,aACJf,UAAU,qBAVhB,wBAAIA,UAAU,aAAd,eCiBCgB,MAlBf,WAAgB,IAAD,EAE2B3B,mBAAS,IAFpC,mBAEN4B,EAFM,KAEQC,EAFR,KAIb,OACE,yBAAKlB,UAAU,OACf,yBACEA,UAAU,YACVc,IAAI,yEACJC,IAAI,YACJP,KAAK,cAEP,kBAAC,EAAD,CAAQpB,oBAAsB8B,IAC9B,kBAAC,EAAD,CAAeR,QAAWO,MCNVE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7D,MAAK,SAAA8D,GACJA,EAAaC,gBAEdpD,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMoD,c","file":"static/js/main.275c41aa.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst getImages = (query) => {\n    if(!query) {\n        return Promise.resolve([]);\n    } else {\n        return(\n            axios.get('https://images-api.nasa.gov/search', {\n                params: {\n                  q: query\n                }\n              })\n            .then(response => {\n            const results = response.data.collection.items\n            const resultImages = results.filter(img => {\n               return img.data[0].media_type === 'image'\n            })  \n            const images = resultImages.map(img => {\n                return img.links[0].href\n            })\n            return images;\n            })\n            .catch(error => {\n                console.log(error)\n            })\n        )\n    }\n};\n\nexport default getImages;\n","import React , { useState } from 'react';\nimport '../styles/Search.css';\nimport getImages from '../requests/getImages';\nimport PropTypes from 'prop-types';\n\nconst Search = ({setSearchResultList}) => {\n    const [searchText, setSearchText] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [isError, setIsError] = useState(false);\n    \n    const handleSubmit = async (event) => {\n        setIsLoading(true);\n        event.preventDefault();\n        try {\n            setSearchResultList(await getImages(searchText));        \n        } catch (error) {\n            setIsError(true);\n        }   \n        setIsLoading(false);  \n    };\n\n    if (isError) {\n        return <div>Sorry, something went wrong. Please refresh the page.</div>;\n    }\n\n    return(\n        <>\n            <form\n                className='search-form'\n                onSubmit={handleSubmit}\n            >\n                <input\n                    className='search-input'\n                    type='text'\n                    placeholder='Search for an image'\n                    onChange={(e) => setSearchText(e.target.value)}\n                >\n                </input>\n                <button\n                    className='submit-button'\n                    type='submit'\n                    name='go'\n                >\n                    Go!\n                </button>\n            </form>\n            {isLoading && <div className='loader'></div>}\n        </>\n    )   \n};\n\nSearch.propTypes = {\n    setSearchResultList: PropTypes.func.isRequired\n};\n\nexport default Search;\n","import React from 'react';\nimport '../styles/SearchResults.css';\nimport PropTypes from 'prop-types';\n\nconst SearchResults = ({results}) => {\n    if(!results.length) {\n       return <h1 className='no-result'>No result</h1>\n    } else {\n    return(\n        <div className='image-container'>\n            <>\n                {results.map(image => \n                    <img \n                    key={image}\n                    src={image}\n                    alt='spaceImage'\n                    className='spaceImages'\n                    />\n                )}\n            </>            \n        </div>\n    )\n    };\n};\n    \nSearchResults.propTypes = {\n    results: PropTypes.array.isRequired};    \n\nexport default SearchResults;","import React, { useState } from 'react';\nimport '../styles/App.css';\nimport Search from './Search';\nimport SearchResults from '../components/SearchResults';\n\nfunction App() {\n  \n  const [searchResult, setSearchResult] = useState([]);\n\n  return (\n    <div className=\"App\">\n    <img\n      className='nasa-logo'\n      src='https://cdn.cnn.com/cnnnext/dam/assets/200424060716-nasa-worm-logo.jpg'\n      alt='nasa-logo'\n      name='nasa-logo'\n    />\n    <Search setSearchResultList ={setSearchResult}/>\n    <SearchResults results = {searchResult} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}